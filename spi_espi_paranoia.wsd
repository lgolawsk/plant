@startuml flash_erase
title flash_erase (flash_write, almost the same)
participant flash_service as fs
participant storage_driver as st_d
participant spi_drv as sp_d
participant spi_hw as sp_hw
participant espi_drv as es_d
participant espi_hw as es_hw

group SPI
fs -> st_d : storage_flash_sector_erase/\nstorage_flash_block_erase
st_d -> sp_d : spi_flash_drv_erase
group timeout [10sec]
sp_d -> sp_hw : spi_flash_drv_poll_chip_busy_by_chip_id \n(reads FLASH status reg untill specified \ntimeout happens, currently default_tmo 10sec !!!)
end
sp_d -> sp_hw : spi_flash_drv_write_enable
sp_d -> sp_hw : spi_drv_write with erase opcode
st_d <-- sp_d : status
fs <-- st_d : status
end

group ESPI
fs -> st_d : storage_flash_sector_erase/\nstorage_flash_block_erase
st_d ->es_d : espi_saf_erase
group timeout [10sec (waits until write/erase in progress)]
es_d -> es_hw : espi_saf_poll_chip_busy \n(checks if previous \nFlash Ch wr/rd operation is in progress \n(based on g_erase_write_counter), \nin case of operation in progress checks \nfor completion (currently default_tmo 10sec !!!)
end
group timeout [10sec (flash ch NP queue)]
es_d -> es_hw : espi_saf_is_slave_np_buffer_free \n untill NP queue not empty
end
es_d -> es_hw : spi_flash_drv_write_enable
es_d -> es_hw : espi_saf_send with erase opcode
es_d <-- es_hw : espi_fc_np_handle_response <font color=red><b>(TODO)
st_d <-- es_d : status
fs <-- st_d : status
end
@enduml

@startuml flash_read
title flash_read (HW_SEQ or memory based) (similar: read_status, write_status (wo returned data) read_jedec_id and read_sfdp are similar)
participant flash_service as fs
participant storage_driver as st_d
participant spi_drv as sp_d
participant spi_hw as sp_hw
participant espi_drv as es_d
participant espi_hw as es_hw
group SPI
fs -> st_d : storage_flash_read
st_d -> sp_d : spi_flash_drv_read
'st_d -> sp_d : espi_saf_read
group timeout [10sec]
note right : (it is a bit more complicated in case \nof read which breaks cs0 boundary)
sp_d -> sp_hw : spi_flash_drv_poll_chip_busy_by_chip_id \n(reads FLASH status reg untill specified \ntimeout happens, currently default_tmo 10sec !!!)
end
sp_d -> sp_hw : spi_flash_drv_read_chip
sp_d <-- sp_hw : status and data
st_d <-- sp_d : status and data
fs <-- st_d : status and data
end
group ESPI
fs -> st_d : storage_flash_read
st_d -> es_d : espi_saf_read
group timeout [10sec (waits until write/erase in progress)]
es_d -> es_hw : espi_saf_poll_chip_busy \n(checks if previous \nFlash Ch wr/rd operation is in progress \n(based on g_erase_write_counter), \nin case of operation in progress checks \nfor completion (currently default_tmo 10sec !!!)
end
group timeout [10sec (flash ch ready check)]
es_d -> es_hw : espi_cfg_poll_on_channel_ready \n checks if flash channel is ready
end
es_d -> es_hw : spi_flash_drv_read_chip
es_d <-- es_hw : status and data
st_d <-- es_d : status and data
fs <-- st_d : status and data
end
@enduml

@startuml espi_lpc_send_p_write
title espi_lpc_send_p_write
participant espi_service as es
participant espi_drv as ed
participant espi_hw as eh

es -> ed : espi_lpc_send_p_write
group timeout [10sec (ch lpc ready)]
ed -> eh : espi_cfg_poll_on_channel_ready
end
group timeout [10sec (ch lpc pc buffer free)]
ed ->eh : espi_lpc_is_slave_pc_buffer_free
end
ed ->eh : espi_lpc_store_tx_data
group timeout [10sec (until send not finished)]
ed ->eh : espi_lpc_send
end
ed ->eh : espi_lpc_p_handle_response \n(can publish error event)
ed <-- eh : status
es <-- ed : status
@enduml

@startuml espi_lpc_send_np_write
title espi_lpc_send_np_write
participant espi_service as es
participant espi_drv as ed
participant espi_hw as eh

es -> ed : espi_lpc_send_np_write
group timeout [10sec (ch lpc ready)]
ed -> eh : espi_cfg_poll_on_channel_ready
end
group timeout [10sec (ch lpc np buffer free)]
ed ->eh : espi_lpc_is_slave_np_buffer_free
end
ed ->eh : espi_lpc_store_tx_data
group timeout [10sec (until send not finished)]
ed ->eh : espi_lpc_send
end
ed ->eh : espi_lpc_np_handle_response \n(can publish error event, no timeout, \nin case of not response just pending \nstarus returned)
ed <-- eh : status
es <-- ed : status
@enduml

@startuml espi_lpc_send_np_read
title espi_lpc_send_np_read
participant espi_service as es
participant espi_drv as ed
participant espi_hw as eh

es -> ed : espi_lpc_send_np_read
group timeout [10sec (ch lpc ready)]
ed -> eh : espi_cfg_poll_on_channel_ready
end
group timeout [10sec (ch lpc np buffer free)]
ed ->eh : espi_lpc_is_slave_np_buffer_free
end
ed ->eh : espi_lpc_store_tx_data
group timeout [10sec (until send not finished)]
ed ->eh : espi_lpc_send
end
ed ->eh : espi_lpc_np_handle_response \n(can publish error event, no timeout, \nin case of not response just pending \nstarus returned)
ed <-- eh : status nad data
es <-- ed : status and data
@enduml